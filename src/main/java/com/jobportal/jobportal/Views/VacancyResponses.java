/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.jobportal.jobportal.Views;

import com.jobportal.jobportal.Api.modules.Requests.Vacancy.VacancyResponsesRequests;
import com.jobportal.jobportal.Api.modules.Responses.Vacancy.VacancyResponsesResponse;
import com.jobportal.jobportal.Api.modules.TokenFile;
import com.jobportal.jobportal.Api.modules.Vacancy;
import com.jobportal.jobportal.SnowBackground;
import java.io.IOException;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import org.apache.http.HttpException;
import org.json.JSONException;
import java.net.URISyntaxException;
import javax.swing.JFrame;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.ImageIcon;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
/**
 *
 * @author kotorkovsciy
 */
public class VacancyResponses extends JFrame {

    /**
     * Creates new form VacancyResponses
     */
    public VacancyResponses(Integer id) {
        SnowBackground snowBackground = new SnowBackground();
        setContentPane(snowBackground);
        initComponents();
        ImageIcon image = new ImageIcon("assets/logo.jpg");
        setIconImage(image.getImage());
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Запрет редактирования ячеек
            }
        };
        model.addColumn("ID");
        model.addColumn("Название");
        model.addColumn("Время отклика");
        
        tableResponses.setModel(model);
        tableResponses.getColumn("ID").setMinWidth(0);
        tableResponses.getColumn("ID").setMaxWidth(0);
        tableResponses.getColumn("ID").setWidth(0);
        
        VacancyResponsesRequests request = new VacancyResponsesRequests(id);
        
        try {
            TokenFile token = new TokenFile();
            List<VacancyResponsesResponse> vacancyResponses = Vacancy.getResponses(request, token.readToken());
            for (VacancyResponsesResponse response : vacancyResponses) {
                model.addRow(new Object[]{response.id, response.title, formatTime(response.createdAt)});
            }
        } catch (IOException | JSONException | HttpException | URISyntaxException e) {
            e.printStackTrace(); // Обработка ошибок
        }
        
        tableResponses.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    int selectedRow = tableResponses.getSelectedRow();
                    if (selectedRow != -1) {
                        // Получение данных о выбранной вакансии
                        int id = (int) model.getValueAt(selectedRow, 0);
                        String title = (String) model.getValueAt(selectedRow, 1);  

                        VacancyResponse vacancyResponsenewFrame = new VacancyResponse(id);
                        vacancyResponsenewFrame.setVisible(true);
                        vacancyResponsenewFrame.setTitle("Резюме: " + title);
                    }
                }
            }
        });
        
        jScrollPane1.setViewportView(tableResponses);
        
    }

    // Метод для форматирования времени в удобочитаемую строку
    private static String formatTime(String timeString) {
        ZonedDateTime dateTime = ZonedDateTime.parse(timeString);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM HH:mm");
        return dateTime.format(formatter);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableResponses = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tableResponses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tableResponses);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(54, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableResponses;
    // End of variables declaration//GEN-END:variables
}
